
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/libs-snapshot" }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.10.RELEASE")
        classpath("com.bmuschko:gradle-docker-plugin:2.6.8")
    }
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.DockerRegistryCredentials


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    slf4jVersion = '1.7.10'
    logbackVersion = '1.1.2'
    springVersion = '4.1.6.RELEASE'
    springBootVersion = '1.2.3.RELEASE'
    springCloudVersion = '1.0.1.RELEASE'
    spockVersion = '0.7-groovy-2.0'


}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}




configurations.all {
    resolutionStrategy {
        eachDependency {
            if (it.requested.group == 'org.apache.tomcat.embed') {
                it.useVersion '8.0.20'
            }
        }
    }
    all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
}

/*
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}
*/

/*processResources {
    expand(project.properties)
}*/

jar {
    baseName = 'appointmentGateway'
    version = '0.1.0'
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/libs-snapshot" }
}

bootRun {
    println "---- setting spring active profile: queue ------------"
    environment "spring.profiles.active", "queue"
}


dependencies {

    // Spring Boot
    compile("org.springframework.boot:spring-boot-starter:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-log4j:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    compile("org.springframework.boot:spring-boot-starter-amqp:$springBootVersion")

    compile "org.projectlombok:lombok:1.16.4"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.6.0-rc1"

    // Spring Cloud
    compile "org.springframework.cloud:spring-cloud-aws-context:$springCloudVersion"
    compile "org.springframework.cloud:spring-cloud-aws-messaging:$springCloudVersion"
    compile "org.springframework.cloud:spring-cloud-starter-eureka:$springCloudVersion"

    // Spring Framework
    compile "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-context-support:$springVersion",
            "org.springframework:spring-tx:$springVersion"


    compile 'com.amazonaws:aws-java-sdk-sqs:1.9.30'

    compile 'com.fasterxml.jackson.core:jackson-core:2.5.2'

    compile "io.springfox:springfox-swagger2:2.0.0"
    compile 'io.springfox:springfox-swagger-ui:2.0.0'

    // TEST Dependencies
    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")

    testCompile 'org.raml:raml-parser:0.8.11'
}


task copyBaseDockerFile(type: Copy) {
    from 'src/main/docker/base/'
    into 'build/docker/base/'
}

task copyJarFileToDocker(type: Copy) {
    from 'build/libs/'
    into 'build/docker/base/'
    include '*.jar'

    rename(/appointmentGateway-(.+)/, 'appointmentGateway.jar')
    //inputDir = file('docker/myapp')
    //tag = 'test/myapp'
}

docker {
    def dockerURL = System.env.DOCKER_HOST
    if (dockerURL) {
        println "Using docker URL form DOCKER_HOST " + dockerURL
        def m = dockerURL =~ /(\d+)\.(\d+)\.(\d+)\.(\d+):(\d+)/

        url = 'https://' + m[0][0]
        certPath = new File(System.properties['user.home'], '.docker/machine/machines/default')
    } else {
        println "No DOCKER_HOST set"
    }
}

def groupName = 'catcalzone'

def getRegistryCredentials = {
    def dockerRegistryCredentials = new DockerRegistryCredentials()
    dockerRegistryCredentials.username = System.env.DOCKER_REGISTRY_USERNAME
    dockerRegistryCredentials.email = System.env.DOCKER_REGISTRY_EMAIL
    dockerRegistryCredentials.password = System.env.DOCKER_REGISTRY_PASSWORD
    //dockerRegistryCredentials.url = System.env.DOCKER_REGISTRY_URL
    dockerRegistryCredentials
}

task buildBaseImage(type: DockerBuildImage) {
    inputDir = file('build/docker/base/')
    tag = "${groupName}/appointmentgateway-base"
}

copyJarFileToDocker.dependsOn build
copyBaseDockerFile.dependsOn build
buildBaseImage.dependsOn copyBaseDockerFile
buildBaseImage.dependsOn copyJarFileToDocker


task copyMockDockerFile(type: Copy) {
    from 'src/main/docker/mock/'
    into 'build/docker/mock/'
}


task buildMockImage(type: DockerBuildImage) {
    inputDir = file('build/docker/mock/')
    tag = "${groupName}/appointmentgateway-mock"
}

buildMockImage.dependsOn buildBaseImage
buildMockImage.dependsOn copyMockDockerFile

task copyAWSDockerFile(type: Copy) {
    from 'src/main/docker/aws/'
    into 'build/docker/aws/'
}


task buildAWSImage(type: DockerBuildImage) {
    inputDir = file('build/docker/aws/')
    tag = "${groupName}/appointmentgateway-aws"
}

buildAWSImage.dependsOn buildBaseImage
buildAWSImage.dependsOn copyAWSDockerFile

task copyAWSMockDockerFile(type: Copy) {
    from 'src/main/docker/aws/'
    into 'build/docker/aws-mock/'
}


task buildAWSMockImage(type: DockerBuildImage) {
    inputDir = file('build/docker/aws-mock/')
    tag = "${groupName}/appointmentgateway-aws-mock"
}

buildAWSMockImage.dependsOn buildBaseImage
buildAWSMockImage.dependsOn copyAWSMockDockerFile



task pushImage(type: DockerPushImage) {
    imageName = "${groupName}/appointmentgateway-aws-mock"
    // tag = "aderenbach/appointmentgateway-aws-mock"
    registryCredentials = getRegistryCredentials()

}

//pushImage.dependsOn buildAWSMockImage